// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum BookActionType {
  BORROW
  RETURN
  BUY
  RESTOCK
  RESTOCK_COMPLETED
}

enum UserBookType {
  BORROWED
  BOUGHT
}

enum UserBookStatus {
  ACTIVE
  RETURNED
}

enum WalletMovementType {
  CREDIT
  DEBIT
}

model User {
  id         String     @id
  email      String     @unique
  name       String?
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  actions    BookAction[]
  userBooks  UserBook[]
  wallet     Wallet?
}

model Book {
  id          Int      @id @default(autoincrement())
  authors     String[]
  title       String
  genres      String[]
  sellPrice   Float
  borrowPrice Float
  stockPrice  Float
  copies      Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  actions     BookAction[]
  userBooks   UserBook[]
}

model BookAction {
  id         Int            @id @default(autoincrement())
  bookId     Int
  userId     String
  user       User           @relation(fields: [userId], references: [id])
  actionType BookActionType
  quantity   Int            @default(1)
  createdAt  DateTime       @default(now())
  book       Book           @relation(fields: [bookId], references: [id])
}

model Wallet {
  id        Int      @id @default(autoincrement())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  balance   Float    @default(100.00)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  movements WalletMovement[]
}

model WalletMovement {
  id          Int               @id @default(autoincrement())
  walletId    Int
  amount      Float
  type        WalletMovementType
  description String
  createdAt   DateTime          @default(now())
  wallet      Wallet            @relation(fields: [walletId], references: [id])
}

model UserBook {
  id        Int           @id @default(autoincrement())
  userId    String
  user      User          @relation(fields: [userId], references: [id])
  bookId    Int
  type      UserBookType
  status    UserBookStatus @default(ACTIVE)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  book      Book          @relation(fields: [bookId], references: [id])
}
